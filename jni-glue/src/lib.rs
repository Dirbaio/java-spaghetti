//! Common glue code between Rust and JNI, used in autogenerated bindgen-jni glue code.

// Re-export a few things such that we have a consistent name for them in autogenerated glue code wherever we go.
#[doc(hidden)] pub use ::std as std;
#[doc(hidden)] pub use ::jni_sys as jni_sys;
#[doc(hidden)] pub use jni_sys::jchar; // XXX: Do we want a jchar (u16) newtype wrapper...?

use jni_sys::*;
use lazy_static::*;

use std::ffi::*;
use std::ptr::*;
use std::marker::PhantomData;
use std::ops::Deref;
use std::sync::*;

pub(crate) mod backends { // XXX: Might expose this to the end user in order to let them choose which backend to use...?
    use super::*;

    mod single_vm_backend;

    pub(crate) use single_vm_backend::*;
}

mod refs {
    use super::*;

    mod global;
    mod local;

    pub use global::*;
    pub use local::*;
}

mod __bindgen_jni;
mod as_jvalue;
mod as_valid_jobject_and_env;
mod env;
mod gen_vm;
mod object_and_env;
mod result;
mod vm;

pub use as_jvalue::*;
pub use as_valid_jobject_and_env::*;
pub use env::*;
pub(crate) use gen_vm::*;
pub use object_and_env::*;
pub use refs::*;
pub use result::*;
pub use vm::*;



type VmBackend = backends::SingleVmBackend;
lazy_static! { // RwLock::new is not const
    static ref VMS : RwLock<VmBackend> = RwLock::new(VmBackend::new());
}

#[no_mangle] #[allow(non_snake_case)] // Called by the JVM... must match this case.
pub extern "system" fn JNI_OnLoad(vm: *const JavaVM, _reserved: *const c_void) -> jint {
    unsafe { VMS.write().unwrap().on_load(vm) };
    JNI_OK
}

#[no_mangle] #[allow(non_snake_case)] // Called by the JVM... must match this case.
pub extern "system" fn JNI_OnUnload(vm: *const JavaVM, _reserved: *const c_void) {
    VMS.write().unwrap().on_unload(vm);
}
